#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
    ЮТТесты.ДобавитьТестовыйНабор("Документ Перевод: Проверка проведения").ВТранзакции()
		.ДобавитьТест("ПроверкаПроведенияПозитив")
		.ДобавитьТест("ПроверкаПроведенияНегатив")
		;

КонецПроцедуры

Процедура ПроверкаПроведенияПозитив() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	ДлинаТекста = 1000;
	ПользовательНовый = СозданиеПользователя("Test_User");
	ПроизведениеНовый = СозданиеПроизведения("Test_Book", ДлинаТекста);
		
	ПланПереводов = СозданиеДокументаПланПеревода(ПользовательНовый, ПроизведениеНовый, ДлинаТекста);
	
	КонструкторПеревода = ЮТест.Данные().КонструкторОбъекта("Документы.Перевод")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("Пользователь", ПользовательНовый)
		.Установить("Произведение", ПроизведениеНовый)
		.Установить("Текст", ТекстПроизведения(ДлинаТекста))
		;
		
	Перевод = КонструкторПеревода.Записать(); // формируем документ ссылку не проведенную
	
	// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	
	
	ЮТест.ОжидаетЧто(Перевод.ПолучитьОбъект())  // Объект, метод которого проверяем
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   // Указываем проверяемый метод и параметры вызова
		.НеВыбрасываетИсключение()	
		;

КонецПроцедуры

Процедура ПроверкаПроведенияНегатив() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	ДлинаТекста = 1000;
	ПользовательНовый = СозданиеПользователя("Test_User");
	ПроизведениеНовый = СозданиеПроизведения("Test_Book", ДлинаТекста);
		
	ПланПереводов = СозданиеДокументаПланПеревода(ПользовательНовый, ПроизведениеНовый, ДлинаТекста);
	
	КонструкторПеревода = ЮТест.Данные().КонструкторОбъекта("Документы.Перевод")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("Пользователь", ПользовательНовый)
		.Установить("Произведение", ПроизведениеНовый)
		.Установить("Текст", ТекстПроизведения(ДлинаТекста/100))
		;
		
	Перевод = КонструкторПеревода.Записать(); // формируем документ ссылку не проведенную
	
	// Проверка метода проведения, в случае выполнения кода: 
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	
	//
	ЮТест.ОжидаетЧто(Перевод.ПолучитьОбъект())  // Объект, метод которого проверяем
		.Метод("Записать",  ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный)) // Указываем проверяемый метод и параметры вызова
		.ВыбрасываетИсключение("Не удалось провести ""Перевод")	
		;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СозданиеПользователя(Наименование)
	
		
	КонструкторПользователя = ЮТест.Данные().КонструкторОбъекта("Справочники.Пользователи")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", Наименование)
		;
    ПользовательНовый = КонструкторПользователя.Записать();
	
	Возврат ПользовательНовый;

КонецФункции

Функция СозданиеПроизведения(Наименование, ДлинаПроизведения)
	
		
	КонструкторПроизведения = ЮТест.Данные().КонструкторОбъекта("Справочники.Произведения")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", Наименование)
		.Установить("ТекстОригинал", ТекстПроизведения(ДлинаПроизведения))
		;
    ПроизведениеНовый = КонструкторПроизведения.Записать();
	
	Возврат ПроизведениеНовый;

КонецФункции

Функция ТекстПроизведения(Длина)
	
	Результат = "1";
	Для Сч = 1 По Длина Цикл
		Результат = Результат + "1";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СозданиеДокументаПланПеревода(ПользовательНовый, ПроизведениеНовый, План)

	// Создание прихода
	КонструкторПланаПеревода = ЮТест.Данные().КонструкторОбъекта("Документы.ПланПереводов")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Сотрудники").ДобавитьСтроку()
			.Установить("Пользователь", ПользовательНовый)
			.Установить("Произведение", ПроизведениеНовый)
			.Установить("План", План)
		;
		
	ПланПереводов = КонструкторПланаПеревода.Провести();  // формируем документ ссылку проведененную
	
	Возврат ПланПереводов;

КонецФункции 

#КонецОбласти
